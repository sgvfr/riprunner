{"version":3,"sources":["webpack:///./src/app/menu-user-accounts/menu-user-accounts.component.html","webpack:///./src/app/menu-user-accounts/menu-user-accounts.component.ts","webpack:///./src/app/menu-user-accounts/menu-user-accounts.module.ts","webpack:///./src/app/menu-user-accounts/user-accounts.service.ts"],"names":[],"mappings":"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","file":"menu-user-accounts-menu-user-accounts-module-ngfactory.js","sourcesContent":["<head>\n    <meta charset=\"UTF-8\">\n    <title>Secure Login: Protected Page</title>\n</head>\n\n<div class=\"container_center\">\n    <div *ngxPermissionsOnly=\"['USER-AUTHENTICATED']\">\n    \n<!--\n    {% include 'user-welcome.twig.html' %}\n    {% include 'live-callout-warning.twig.html' %}\n-->\n    \n    <div class=\"menudiv_wrapper\">\n      <nav class=\"vertical\">\n        <ul>\n          <li>\n            <label for=\"main_page\">Return to ..</label>\n            <input type=\"radio\" name=\"verticalMenu\" id=\"main_page\" />\n            <div>\n              <ul>\n                  <li><a [routerLink]=\"['/main-menu']\">Main Menu</a></li>\n              </ul>\n            </div>\n          </li>\n          <li>\n            <label for=\"logout\">Exit</label>\n            <input type=\"radio\" name=\"verticalMenu\" id=\"logout\" />\n            <div>\n              <ul>\n                  <li><a [routerLink]=\"['/login']\">Logout</a></li>\n              </ul>\n            </div>\n          </li>\n        </ul>\n      </nav>\n    </div>\n\n    <app-send-message *ngIf=\"!selfEditMode\" [users]='getSelectedUsers()' ></app-send-message>\n<!--    \n    {% if usersmenu_ctl_action_error == 100 %}\n    <b><font color=\"red\">Invalid password! Passwords must match and be at least 5 characters.</font></b>\n    {% elseif usersmenu_ctl_action_error == 101 %}\n    <b><font color=\"red\">You must enter a Firehall Id</font></b>\n    {% elseif usersmenu_ctl_action_error == 102 %}\n    <b><font color=\"red\">You must enter a User Id</font></b>            \n    {% endif %}\n\n    {% if gvm.firehall.LDAP.ENABLED == true %}\n    <b><font color=\"red\">*Note: You cannot edit user info in LDAP mode.</font></b>\n    {% endif %}\n-->\n\n<button mat-icon-button (click)=\"reloadData()\">\n    <mat-icon>refresh</mat-icon>\n</button>\n<div *ngIf=\"errorMessage\" [ngClass]=\"'error'\">The following error was detected: {{errorMessage}}</div>\n\n<div class=\"table-container mat-elevation-z8\">\n    <div class=\"loading-shade\" *ngIf=\"(isLoadingResults | async)\">\n      <mat-spinner *ngIf=\"(isLoadingResults | async)\"></mat-spinner>\n    </div>\n    <mat-table #table [dataSource]=\"dataSource\" matSort matSortDirection=\"asc\">\n\n     <ng-container matColumnDef=\"grid_update_row\">\n        <mat-header-cell *matHeaderCellDef>\n            <input #selectAllUsers *ngIf=\"!selfEditMode\" type=\"checkbox\" (change)=\"select_all_users($event)\">\n            <button *ngIf=\"!isEditing()\" mat-icon-button value=\"add box\" (click)=\"add_user()\">\n                <mat-icon>add box</mat-icon>\n            </button>\n        </mat-header-cell>\n        <mat-cell *matCellDef=\"let row\">\n            <input *ngIf=\"!selfEditMode\" type=\"checkbox\" [checked]=\"check_user_selected(row)\" (change)=\"select_user($event, row)\">\n            <button *ngIf=\"!isEditing() && !editingRow(row.id)\" mat-icon-button value=\"Edit\" (click)=\"edit_user(row)\">\n                <mat-icon>edit</mat-icon>\n            </button>\n            <button *ngIf=\"!selfEditMode && !isEditing() && !editingRow(row.id)\" mat-icon-button value=\"Delete\" (click)=\"delete_user(row)\">\n                <mat-icon>delete</mat-icon>\n            </button>\n            <button *ngIf=\"editingRow(row.id)\" mat-icon-button value=\"Cancel\" (click)=\"cancel_user($event, row)\">\n                <mat-icon>cancel</mat-icon>\n            </button>\n            <button *ngIf=\"editingRow(row.id)\" mat-icon-button value=\"Save\" (click)=\"save_user($event, row)\">\n                <mat-icon>save</mat-icon>\n            </button>\n        </mat-cell>\n     </ng-container>\n                    \n      <ng-container matColumnDef=\"id\">\n        <mat-header-cell *matHeaderCellDef mat-sort-header>#</mat-header-cell>\n        <mat-cell *matCellDef=\"let row\">{{ row.id }}</mat-cell>\n      </ng-container>\n  \n      <ng-container matColumnDef=\"firehall_id\">\n        <mat-header-cell *matHeaderCellDef mat-sort-header>Firehall</mat-header-cell>\n        <mat-cell *matCellDef=\"let row\">\n            <input *ngIf=\"!selfEditMode && editingRow(row.id)\" type=\"text\" [(ngModel)]=\"row.firehall_id\">\n            <span *ngIf=\"selfEditMode || !editingRow(row.id)\">{{ row.firehall_id }}</span> \n        </mat-cell>\n      </ng-container>\n  \n      <ng-container matColumnDef=\"user_id\">\n        <mat-header-cell *matHeaderCellDef mat-sort-header>User Id</mat-header-cell>\n        <mat-cell *matCellDef=\"let row\">\n            <input *ngIf=\"editingRow(row.id)\" type=\"text\" [(ngModel)]=\"row.user_id\">\n            <span *ngIf=\"!editingRow(row.id)\">{{ row.user_id }}</span> \n        </mat-cell>\n      </ng-container>\n\n      <ng-container matColumnDef=\"new_password_1\">\n            <mat-header-cell *matHeaderCellDef mat-sort-header>New Password</mat-header-cell>\n            <mat-cell *matCellDef=\"let row\">\n                <input *ngIf=\"editingRow(row.id)\" type=\"text\" [(ngModel)]=\"new_password_1\">\n            </mat-cell>\n      </ng-container>\n\n      <ng-container matColumnDef=\"new_password_2\">\n            <mat-header-cell *matHeaderCellDef mat-sort-header>Re-enter Password</mat-header-cell>\n            <mat-cell *matCellDef=\"let row\">\n                <input *ngIf=\"editingRow(row.id)\" type=\"text\" [(ngModel)]=\"new_password_2\">\n            </mat-cell>\n      </ng-container>\n        \n      <ng-container matColumnDef=\"email\">\n        <mat-header-cell *matHeaderCellDef mat-sort-header>Email Address</mat-header-cell>\n        <mat-cell *matCellDef=\"let row\">\n            <input *ngIf=\"editingRow(row.id)\" type=\"text\" [(ngModel)]=\"row.email\">\n            <span *ngIf=\"!editingRow(row.id)\">{{ row.email }}</span> \n        </mat-cell>\n      </ng-container>\n  \n      <ng-container matColumnDef=\"user_type\">\n        <mat-header-cell *matHeaderCellDef mat-sort-header>User Type</mat-header-cell>\n        <mat-cell *matCellDef=\"let row\">\n            <select *ngIf=\"!selfEditMode && editingRow(row.id)\" [(ngModel)]=\"row.user_type\">\n                <option *ngFor=\"let userType of getUserAccountTypes()\" \n                        [ngValue]=\"userType.id\" [selected]=\"userType.id === row.user_type\">{{ userType.name }}</option>\n            </select>\n            <span *ngIf=\"selfEditMode ||!editingRow(row.id)\">{{ getUserAccountType(row)?.name }}</span>\n        </mat-cell>\n      </ng-container>\n  \n      <ng-container matColumnDef=\"mobile_phone\">\n        <mat-header-cell *matHeaderCellDef mat-sort-header>Mobile Phone</mat-header-cell>\n        <mat-cell *matCellDef=\"let row\">\n            <input *ngIf=\"editingRow(row.id)\" type=\"text\" [(ngModel)]=\"row.mobile_phone\">\n            <span *ngIf=\"!editingRow(row.id)\">{{ row.mobile_phone }}</span> \n        </mat-cell>\n      </ng-container>\n                    \n      <ng-container matColumnDef=\"access_admin\">\n        <mat-header-cell *matHeaderCellDef mat-sort-header>Admin Access</mat-header-cell>\n        <mat-cell *matCellDef=\"let row\">\n            <input *ngIf=\"!selfEditMode && editingRow(row.id)\" type=\"checkbox\" [(ngModel)]=\"row.access_admin\" [checked]=\"row.access_admin\">\n            <span *ngIf=\"selfEditMode || !editingRow(row.id)\">{{ row.access_admin }}</span>\n        </mat-cell>\n      </ng-container>\n  \n      <ng-container matColumnDef=\"access_sms\">\n        <mat-header-cell *matHeaderCellDef mat-sort-header>Enabled SMS</mat-header-cell>\n        <mat-cell *matCellDef=\"let row\">\n            <input *ngIf=\"!selfEditMode && editingRow(row.id)\" type=\"checkbox\" [(ngModel)]=\"row.access_sms\" [checked]=\"row.access_sms\">\n            <span *ngIf=\"selfEditMode || !editingRow(row.id)\">{{ row.access_sms }}</span>\n        </mat-cell>\n      </ng-container>\n  \n      <ng-container matColumnDef=\"access_respond_self\">\n        <mat-header-cell *matHeaderCellDef mat-sort-header>Enabled Responding</mat-header-cell>\n        <mat-cell *matCellDef=\"let row\">\n            <input *ngIf=\"!selfEditMode && editingRow(row.id)\" type=\"checkbox\" [(ngModel)]=\"row.access_respond_self\" [checked]=\"row.access_respond_self\">\n            <span *ngIf=\"selfEditMode || !editingRow(row.id)\">{{ row.access_respond_self }}</span>\n        </mat-cell>\n      </ng-container>\n  \n      <ng-container matColumnDef=\"access_respond_others\">\n        <mat-header-cell *matHeaderCellDef mat-sort-header>Enabled Responding for others</mat-header-cell>\n        <mat-cell *matCellDef=\"let row\">\n            <input *ngIf=\"!selfEditMode && editingRow(row.id)\" type=\"checkbox\" [(ngModel)]=\"row.access_respond_others\" [checked]=\"row.access_respond_others\">\n            <span *ngIf=\"selfEditMode || !editingRow(row.id)\">{{ row.access_respond_others }}</span>\n        </mat-cell>\n      </ng-container>\n  \n      <ng-container matColumnDef=\"active\">\n        <mat-header-cell *matHeaderCellDef mat-sort-header>User Active</mat-header-cell>\n        <mat-cell *matCellDef=\"let row\">\n            <input *ngIf=\"!selfEditMode && editingRow(row.id)\" type=\"checkbox\" [(ngModel)]=\"row.active\" [checked]=\"row.active\">\n            <span *ngIf=\"selfEditMode || !editingRow(row.id)\">{{ row.active }}</span>\n        </mat-cell>\n      </ng-container>\n  \n      <ng-container matColumnDef=\"updatetime\">\n        <mat-header-cell *matHeaderCellDef mat-sort-header>Update Date/Time</mat-header-cell>\n        <mat-cell *matCellDef=\"let row\">{{ row.updatetime }}</mat-cell>\n      </ng-container>\n      \n      <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n      <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>        \n    </mat-table>\n  \n    <mat-paginator #paginator [length]=\"resultsLength\" [pageSize]=\"30\">\n    </mat-paginator>\n  </div>\n\n  </div>\n</div>\n","import {Component, AfterViewInit, ElementRef, ViewChild} from '@angular/core';\nimport {MatDialog, MatPaginator, MatSort, MatTableDataSource} from '@angular/material';\nimport {Observable, merge, of} from 'rxjs';\nimport {catchError, map, startWith, switchMap} from 'rxjs/operators';\nimport {Location} from '@angular/common';\nimport {Router} from '@angular/router';\n\nimport {AuthService} from '@app/auth';\nimport {UserAccountsService, UserAccount, UserAccountType} from './user-accounts.service';\nimport {DeleteDialogComponent} from '@app/common';\nimport {SendMessageComponent} from '@app/common';\n\n@Component({\n  selector: 'app-menu-user-accounts',\n  templateUrl: './menu-user-accounts.component.html',\n  styleUrls: ['./menu-user-accounts.component.css'],\n})\nexport class MenuUserAccountsComponent implements AfterViewInit {\n\n  static NEW_USER_ID = '-1';\n  errorMessage: string;\n  displayedColumns: Array<string>;\n  dataSource = new MatTableDataSource();\n  selectedUsers: Array<string> = new Array<string>();\n\n  resultsLength = 0;\n  isLoadingResults: Observable<boolean> = of(false);\n\n  userAccountTypes: Array<UserAccountType>;\n  editRowId: string = null;\n  new_password_1: string;\n  new_password_2: string;\n  selfEditMode: boolean;\n\n  @ViewChild(MatPaginator,{static:false}) paginator: MatPaginator;\n  @ViewChild(MatSort,{static:false}) sort: MatSort;\n  @ViewChild('selectAllUsers',{static:false}) public selectAllUsers: ElementRef;\n\n  constructor(private location: Location, private authService: AuthService,\n              private userAccountService: UserAccountsService,\n              private router: Router, public dialog: MatDialog) {\n    // debugger;\n    const params = this.extractParams();\n    this.selfEditMode = ((params.get('se') || '') !== '' ? true : false);\n    this.setDisplayedColumns();\n  }\n\n  ngAfterViewInit() {\n    // debugger;\n    if (this.sort === undefined) {\n      setTimeout(() => { this.ngAfterViewInit(); }, 25);\n      return;\n    }\n    // If the user changes the sort order, reset back to the first page.\n    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\n\n    merge(this.sort.sortChange, this.paginator.page)\n      .pipe(\n        startWith({}),\n        switchMap(() => {\n          Promise.resolve(null).then(() => this.isLoadingResults = of(true));\n          return this.userAccountService.getUserAccounts(\n            this.sort.active, this.sort.direction, this.paginator.pageIndex);\n        }),\n        map(data => {\n          // Flip flag to show that loading has finished.\n          Promise.resolve(null).then(() =>\n            this.isLoadingResults = of(false)\n          );\n          this.resultsLength = data.length;\n          return data;\n        }),\n        catchError((err) => {\n          debugger;\n\n          this.errorMessage = err.error.text;\n          console.log('Error getting grid data: ' + err.error.text);\n          Promise.resolve(null).then(() =>\n            this.isLoadingResults = of(false)\n          );\n          return of([]);\n        })\n      ).subscribe(data => {\n        // debugger;\n        this.dataSource.data = data;\n        if (this.selfEditMode) {\n          this.dataSource.filterPredicate = (tbldata: UserAccount, filter: string) => String(tbldata.id) === filter;\n          this.applyFilter(this.authService.getId());\n        }\n\n        this.dataSource.sort = this.sort;\n        this.dataSource.paginator = this.paginator;\n        }\n      );\n  }\n\n  reloadData() {\n    this.errorMessage = '';\n    this.ngAfterViewInit();\n  }\n  getFirehallId(): string {\n    return this.authService.getFirehallId();\n  }\n  getExternalUrl(url: string, handOffJWT: boolean = true): string {\n    // debugger;\n    url = this.getRootPath() + url;\n    return this.authService.injectJWTtoken(url, handOffJWT);\n  }\n  getUserAccountType(user: UserAccount) {\n    // debugger;\n    if (this.userAccountTypes == null) {\n      this.userAccountService.getUserAccountTypes().\n      subscribe(data => {\n        // debugger;\n        this.userAccountTypes = data;\n        return this.findUserAccountType(user, this.userAccountTypes);\n      });\n    }\n    else {\n      // debugger;\n      return this.findUserAccountType(user, this.userAccountTypes);\n    }\n  }\n\n  getUserAccountTypes() {\n    // debugger;\n    if (this.userAccountTypes == null) {\n      this.userAccountService.getUserAccountTypes().\n      subscribe(data => {\n        // debugger;\n        this.userAccountTypes = data;\n        return this.userAccountTypes;\n      });\n    }\n    else {\n      // debugger;\n      return this.userAccountTypes;\n    }\n  }\n\n  isEditing(): boolean {\n    // debugger;\n    return this.editRowId !== null;\n  }\n\n  editingRow(rowid): boolean {\n    // debugger;\n    return this.editRowId !== null && this.editRowId == rowid ? true : false;\n  }\n\n  add_user() {\n    // debugger;\n    this.new_password_1 = '';\n    this.new_password_2 = '';\n\n    this.editRowId = MenuUserAccountsComponent.NEW_USER_ID;\n\n    this.dataSource.data.unshift({\n      id: this.editRowId,\n      firehall_id: null,\n      user_id: '',\n      new_password_1: this.new_password_1,\n      new_password_2: this.new_password_2,\n      email: '',\n      user_type: null,\n      mobile_phone: null,\n      access_admin: false,\n      access_sms: false,\n      access_respond_self: false,\n      access_respond_others: false,\n      active: true\n    });\n    this.setDisplayedColumns();\n    this.dataSource._updateChangeSubscription();\n  }\n\n  edit_user(row) {\n    // debugger;\n    this.new_password_1 = '';\n    this.new_password_2 = '';\n    this.editRowId = row.id;\n    this.setDisplayedColumns();\n  }\n\n  delete_user(row) {\n    // debugger;\n\n/*\n    if (confirm('Confirm DELETE for user: ' + row.user_id + '?')) {\n      this.userAccountService.deleteUserAccount(row.id).subscribe(result => {\n        debugger;\n        this.editRowId = null;\n        this.setDisplayedColumns();\n        this.reloadData();\n      });\n    }\n*/\n    const dialogRef = this.dialog.open(DeleteDialogComponent, {\n      data: { id: row.id, title: 'Delete the user: [' + row.user_id + '] ?',\n              context: 'deleteUserAccount', service: this.userAccountService },\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      // debugger;\n      if (result === 1) {\n        this.editRowId = null;\n        this.setDisplayedColumns();\n        this.reloadData();\n      }\n    });\n  }\n\n  cancel_user(event, row) {\n    // debugger;\n    const isNewUser = row.id == MenuUserAccountsComponent.NEW_USER_ID;\n    this.errorMessage = '';\n    this.new_password_1 = '';\n    this.new_password_2 = '';\n    this.editRowId = null;\n    if (isNewUser) {\n      this.dataSource.data.splice(0, 1);\n    }\n    this.setDisplayedColumns();\n    this.dataSource._updateChangeSubscription();\n  }\n\n  save_user(event, row) {\n    // debugger;\n    this.save_user_edit(row).then(result => {\n      // debugger;\n      if (result === 'ok') {\n        this.errorMessage = '';\n        this.editRowId = null;\n        this.setDisplayedColumns();\n        this.reloadData();\n      }\n      else {\n        this.errorMessage = result;\n      }\n    });\n  }\n\n  save_user_edit(row) {\n    // debugger;\n    if (row.id < 0) {\n      return this.userAccountService.addUserAccount(this.new_password_1, this.new_password_2, row);\n    }\n    return this.userAccountService.editUserAccount(this.new_password_1, this.new_password_2, row);\n  }\n\n  getSelectedUsers() {\n    // debugger;\n    return this.selectedUsers.join(',');\n  }\n\n  select_all_users($event) {\n    // debugger;\n    this.selectedUsers.length = 0;\n    if ($event.target.checked) {\n      this.dataSource.data.forEach( element => {\n        // debugger;\n        this.selectedUsers.push(element['id']);\n      });\n    }\n  }\n\n  check_user_selected(row) {\n    // debugger;\n    if (this.selectedUsers.includes(row['id'])) {\n      return true;\n    }\n    return false;\n  }\n\n  select_user($event, row) {\n    // debugger;\n    this.selectAllUsers.nativeElement.checked = false;\n    if ($event.target.checked) {\n        if (!this.selectedUsers.includes(row['id'])) {\n          this.selectedUsers.push(row['id']);\n        }\n    }\n    else {\n      // delete this.selectedUsers[row['id']];\n      const index: number = this.selectedUsers.indexOf(row['id']);\n      if (index !== -1) {\n          this.selectedUsers.splice(index, 1);\n      }\n    }\n  }\n\n  private setDisplayedColumns() {\n    if (this.isEditing()) {\n      this.displayedColumns = ['grid_update_row', 'id', 'firehall_id', 'user_id', 'new_password_1', 'new_password_2',\n                'email', 'user_type', 'mobile_phone', 'access_admin', 'access_sms', 'access_respond_self',\n                'access_respond_others', 'active', 'updatetime'\n           ];\n    }\n    else {\n      this.displayedColumns = ['grid_update_row', 'id', 'firehall_id', 'user_id',\n                'email', 'user_type', 'mobile_phone', 'access_admin', 'access_sms', 'access_respond_self',\n                'access_respond_others', 'active', 'updatetime'\n           ];\n    }\n  }\n\n  private findUserAccountType(user: UserAccount, accountTypes: Array<UserAccountType>): UserAccountType {\n    // debugger;\n    const itemFound = accountTypes.filter(function(accountType) {\n      if (user != null && user.user_type === accountType.id) {\n        return true;\n      }\n      return false;\n    });\n    if (itemFound != null && itemFound.length >= 1) {\n      return itemFound[0];\n    }\n    // debugger;\n    return null;\n  }\n\n  private getRootPath(): string {\n    return this.location.prepareExternalUrl('../');\n  }\n\n  private extractParams() {\n    let normalizedQueryString = '';\n    if (window.location.search.indexOf('?') === 0) {\n      normalizedQueryString = window.location.search.substring(1);\n    } else {\n      normalizedQueryString = window.location.search;\n    }\n    return new URLSearchParams(normalizedQueryString);\n  }\n\n  private applyFilter(filterValue: string) {\n    filterValue = filterValue.trim(); // Remove whitespace\n    filterValue = filterValue.toLowerCase(); // MatTableDataSource defaults to lowercase matches\n    this.dataSource.filter = filterValue;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { RouterModule, Routes } from '@angular/router';\nimport { NgxPermissionsModule, NgxPermissionsGuard } from 'ngx-permissions';\n\nimport { MenuUserAccountsComponent } from './menu-user-accounts.component';\nimport { UserAccountsService } from './user-accounts.service';\nimport { SystemSharedModule } from '@app/common';\n\nconst menuRoutes: Routes = [\n  { path: '', component: MenuUserAccountsComponent,\n    canActivate: [NgxPermissionsGuard],\n      data: {\n        permissions: {\n          only: 'USER-AUTHENTICATED',\n          redirectTo: '/login'\n        }\n      }\n  },\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    NgxPermissionsModule.forChild(),\n    RouterModule.forChild(menuRoutes),\n    SystemSharedModule,\n  ],\n  providers: [\n    UserAccountsService\n  ],\n  declarations: [\n    MenuUserAccountsComponent,\n  ]\n})\n\nexport class MenuUserAccountsModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Location } from '@angular/common';\nimport { Observable } from 'rxjs';\n\nimport { AuthService } from '@app/auth';\nimport { DeleteDataService } from '@app/common';\n\nexport interface UserAccount {\n  id: number;\n  firehall_id: string;\n  user_id: string;\n  mobile_phone: string;\n  access: number;\n  user_type: number;\n  active: boolean;\n  email: string;\n  updatetime: string;\n  access_admin: boolean;\n  access_sms: boolean;\n  access_respond_self: boolean;\n  access_respond_others: boolean;\n}\n\nexport interface UserAccountType {\n  id: number;\n  firehall_id: string;\n  name: string;\n  default_access: number;\n  updatetime: string;\n}\n\n@Injectable()\nexport class UserAccountsService implements DeleteDataService {\n\n  constructor(private http: HttpClient, private location: Location, private authService: AuthService) {\n  }\n\n  delete(data: any): Promise<any> {\n    // debugger;\n    if (data.context === 'deleteUserAccount') {\n      return this.deleteUserAccount(data.id);\n    }\n  }\n\n  getUserAccounts(sort: string, order: string, page: number): Observable<UserAccount[]> {\n    const fhid = this.authService.getFirehallId();\n    const href = this.location.prepareExternalUrl('../angular-services/user-accounts-service.php');\n    const requestUrl = `${href}/users?fhid=${fhid}`;\n    return this.http.get<UserAccount[]>(requestUrl);\n  }\n\n  getUserAccountTypes(): Observable<UserAccountType[]> {\n    const fhid = this.authService.getFirehallId();\n    const href = this.location.prepareExternalUrl('../angular-services/user-accounts-service.php');\n    const requestUrl = `${href}/user_types?fhid=${fhid}`;\n    return this.http.get<UserAccountType[]>(requestUrl);\n  }\n\n  deleteUserAccount(user_id: number): Promise<any> {\n    // debugger;\n    const fhid = this.authService.getFirehallId();\n    const href = this.location.prepareExternalUrl('../angular-services/user-accounts-service.php');\n    const requestUrl = `${href}/delete_user?fhid=${fhid}&user_id=${user_id}`;\n    return this.http.post(requestUrl, null).toPromise()\n    .then(response => {\n        // debugger;\n        return response;\n    })\n    .catch((err) => {\n      debugger;\n      return this.handleErrorPromise(err);\n    });\n  }\n\n  addUserAccount(password1: string, password2: string, user: UserAccount): Promise<any> {\n    const fhid = this.authService.getFirehallId();\n    const href = this.location.prepareExternalUrl('../angular-services/user-accounts-service.php');\n    const requestUrl = `${href}/add_user?password1=${password1}&password2=${password2}`;\n    return this.http.post(requestUrl, user).toPromise()\n    .then(response => {\n        //debugger;\n        return response;\n    })\n    .catch((err) => {\n      //debugger;\n      return this.handleErrorPromise(err);\n    });\n  }\n\n  editUserAccount(password1: string, password2: string, user: UserAccount): Promise<any> {\n    const fhid = this.authService.getFirehallId();\n    const href = this.location.prepareExternalUrl('../angular-services/user-accounts-service.php');\n    const requestUrl = `${href}/edit_user?password1=${password1}&password2=${password2}`;\n    return this.http.post(requestUrl, user).toPromise()\n    .then(response => {\n        //debugger;\n        return response;\n    })\n    .catch((err) => {\n      //debugger;\n      return this.handleErrorPromise(err);\n    });\n  }\n\n  private handleErrorPromise(error: Response | any) {\n    debugger;\n\n    console.error(error.message || error);\n    // if (error.status === 400) {\n    //  return 'Invalid login credentials.';\n    // }\n    if (error.error && error.error.exception) {\n      return error.error.exception.message;\n    }\n    if (error.error && error.error.text) {\n      return error.error.text;\n    }\n    return (error.message || error);\n  }\n\n}\n"],"sourceRoot":""}